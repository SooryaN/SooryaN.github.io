<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Haskell Summer of Code Testimonial</title>
      <link href="/2016/09/14/Haskell-Summer-of-Code-Testimonial/"/>
      <url>/2016/09/14/Haskell-Summer-of-Code-Testimonial/</url>
      
        <content type="html"><![CDATA[<p>This blog post marks the end of a pretty awesome summer!</p><p>The Haskell Summer of Code was a great learning experience and a wonderful opportunity to be a part of an open source organization and gain insight into its workings (It’s a lot more work than I thought it would be and kudos to you guys for keeping things running as smoothly as they have been running!)</p><p>A shout out to various people at #haskell for offering their guidance and helping me with my various doubts and my mentors for their guidance and for handing me a free rein.</p><p>You guys make haskell a lot more accessible to everyone :-)</p><h2 id="A-quick-overview"><a href="#A-quick-overview" class="headerlink" title="A quick overview"></a><a href="#A-quick-overview" title="A quick overview"></a>A quick overview</h2><p>I got the opportunity to contribute to <a href="http://hackage.haskell.org/" target="_blank" rel="noopener">Hackage</a>, the Haskell community’s central<br>package archive of open source software.</p><p>It was the first time I got to work on an existing codebase of this scale (along with it being my first large Haskell project).</p><p>While I didn’t get to do everything I’d laid out in my <a href="/2016/05/20/Hackage-Improvements/">proposal</a> (which in hindsight<br>seems a tad grandiose), I feel I’ve got the more important parts done.</p><p>The consolidated PR is <a href="https://github.com/haskell/hackage-server/pull/514" target="_blank" rel="noopener">here</a> and is<br>pending a review as I type this.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><a href="#Summary" title="Summary"></a>Summary</h2><p>What’s been done:</p><ol><li><p><strong>Tags</strong></p><p>Previously, the tags didn’t get much love. They reflected the category in the <code>.cabal</code> file and whether or not it was a library/<br>executable.</p><p>Now, any user can propose additional tags to packages from the package page after which the package maintainers/trustees can accept<br>or discard them using a clickable UI. The proposed tags can be seen at <code>/package/:pkgname/tags</code></p><p>This also brought about the need for tag aliasing wherein a trustee can merge tags together.</p></li><li><p><strong>Browsable Package Index View</strong></p><p>There is now a new route at <code>/packages/browse</code> with browsable of all the packages uploaded to Hackage.</p><p><img src="/assets/hsoc/search_index.png" alt="Screenshot of main search interface"></p><p>A similar interface is present for filtering in the tag and category pages.</p><p>If tagging picks up, it’ll become a lot easier to search for packages.</p></li><li><p><strong>Reverse Dependencies</strong></p><p>Reverse dependencies used to be a Hackage feature until it was discontinued for being a memory hog.</p><p>It’s been rewritten as a <code>PackageId -&gt; PackageId</code> mapping and looks to be performing reasonably as far as memory consumption is<br>concerned.</p><p>The main package page lists out the number of direct and indirect dependencies with more details available at <code>/package/:package/reverse</code> while the overall picture is available at <code>/packages/reverse</code>.</p><p>In addition, after wasting far too much time trying to get d3.js to scale to about 10000 nodes, a WebGL visualisation of packages and<br>their dependencies is available at <code>/packages/graph</code>.</p><p><img src="/assets/hsoc/package_graph.png" alt="A visualization of the package database"></p></li><li><p><strong>Voting</strong></p><p>The voting was a low hanging fruit that needed to be addressed. Some tweaks were made to the voting algorithm along with a shiny new UI<br>to accompany it (You can rate a package out of 3 lambdas!).</p><p><img src="/assets/hsoc/hackage_rating.png" alt="A screenshot of the new voting interface"></p></li><li><p><strong>Some Minor Tweaks</strong></p><p>In addition, there were a few minor changes that were made along the way.</p><p>A lot of the HTML code was restructured into separate templates as opposed to a single large file. The <code>Html.hs</code> file is still terribly large and could do with further breakup.<br>Some changes were also made to the package page such as displaying executables and suggesting related packages among other things.</p></li></ol><h2 id="Future-work"><a href="#Future-work" class="headerlink" title="Future work"></a><a href="#Future-work" title="Future work"></a>Future work</h2><p>There’s still quite a bit that can be done with regards to the areas worked on and I’d love to continue to work on the features and see them to completion.</p><ul><li><p>The graph of packages and their dependencies is still rather basic.<br>More interactivity and additional views can add to its utility.</p></li><li><p>Reinstating the reverse dependencies feature allows for some fairly complex questions to be answered like finding similar packages using<br>dependencies, analysing build reports to make diagnoses, suggesting tags.<br>It can also be used to calculate page-rank or analyse where dependencies are being dropped over time leading to a better popularity metric.</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hackage Improvements</title>
      <link href="/2016/05/20/Hackage-Improvements/"/>
      <url>/2016/05/20/Hackage-Improvements/</url>
      
        <content type="html"><![CDATA[<p>I participated in the 2016 Haskell Summer of code working on Hackage, the haskell community’s repository of software. Here is the accepted proposal.</p><h2 id="What-is-the-goal-of-your-project"><a href="#What-is-the-goal-of-your-project" class="headerlink" title="What is the goal of your project?"></a><a href="#What-is-the-goal-of-your-project" title="What is the goal of your project?"></a>What is the goal of your project?</h2><p>Hackage 2.0 offers a lot of features but some of them aren’t fleshed out fully or could use some additions Issuimprove usability and functionality. This project aims at addressing a few of them.</p><ul><li><p>Issue Tracker:</p><ul><li>for filing bugs in Hackage web interface and other hackage related issues with a hook to notify the developers</li><li>To handle package requests: There are two types of requests that can be filed<ul><li>Bounds Request: Request to change package metadata – i.e. upper/lower bounds on deps. This can be done with a “revision” by a maintainer or a hackage trustee without a new upload.</li><li>Orphan Request: Request a package to be disowned, e.g. when the maintainer is inactive and the package has been flagged out-of-date for a long time.</li></ul></li></ul></li><li><p>Modifications to the Package Page:</p><ul><li>Allow for provisions to add wiki/mailing list links for relevant discussions: Very often, at least with older packages, there seems to be very few usage guidelines and examples. Linking to discussions elsewhere can get a new user upto speed</li><li>Keep track of reverse dependencies (Related Fun Addition: A visualization that maps dependencies and reverse dependencies across all packages (I just love graphs!))</li><li>A better interface for votes: It’s not very usable right now. Making the UI for voting more obvious and easy to use would help eg a clickable star based system</li><li>Add a last updated stamp (very few packages have it at present. It’s not easy to identify how recent/relevant the package is)</li></ul></li><li><p>Tags and Categories:</p><ul><li>Abandon categories and switch over to tags completely. Categories and Tags seem to more or less serve the same purpose. It makes sense to have multiple tags describe a package as opposed to having it being fit into a rigid category.</li><li>Social tagging: (This can be an opt-in feature for maintainers) A system to allow for any user to propose new tags with only the maintainers allowed to accept. This will greatly increase package discoverability. Again, hooks would need to be added to notify the maintainers of any new suggestions.</li></ul></li><li><p>Better searching:</p></li></ul><p>Searching at present doesn’t offer very much.</p><table><thead><tr><th>Package Name</th><th>Author</th><th>Version</th><th>Description</th><th>Tags</th><th>Last Updated</th><th>Votes</th><th>Downloads</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>Using a template like above</p><ul><li>Extend search to filter based on tags (multiple tags), module names, author names etc</li><li>Allow for packages to be ordered by downloads, update times, reverse dependencies etc</li><li>Allow for autocompletion by partial name search</li></ul><h2 id="Can-you-give-some-more-detailed-design-of-what-precisely-you-intend-to-achieve"><a href="#Can-you-give-some-more-detailed-design-of-what-precisely-you-intend-to-achieve" class="headerlink" title="Can you give some more detailed design of what precisely you intend to achieve?"></a><a href="#Can-you-give-some-more-detailed-design-of-what-precisely-you-intend-to-achieve" title="Can you give some more detailed design of what precisely you intend to achieve?"></a>Can you give some more detailed design of what precisely you intend to achieve?</h2><h3 id="Issue-tracker"><a href="#Issue-tracker" class="headerlink" title="Issue tracker"></a><a href="#Issue-tracker" title="Issue tracker"></a>Issue tracker</h3><p>At present, to file any issues, users will have to contact the authors/maintainers (who may no longer be active). By having a public<br>tracker for hackage related issues, issues will have a much higher visibility and thus, a higher chance of being resolved.<br>As for implementation, a new acid-state instance with a web front end should be straightforward.  A sample schema can be like in<br><a href="https://gist.github.com/SooryaN/10e7cdfd5ced92561c919537890d092b#file-bug-yaml" target="_blank" rel="noopener">bug.yaml</a>.</p><h3 id="Reverse-Dependencies"><a href="#Reverse-Dependencies" class="headerlink" title="Reverse Dependencies"></a><a href="#Reverse-Dependencies" title="Reverse Dependencies"></a>Reverse Dependencies</h3><p>Keeping track of reverse dependencies could help usability in a number of ways. For instance, along with efficient tagging, it’ll allow for<br>suggesting related packages, for exploring, and also for calculating a PackageRank(tm).<br>The implementation is still an open issue though. It could be implemented using an external store or something simple like a csv or a json file. Using acid-state to simply count and list the reverse dependencies without storing the actual branching details is also a possibility.</p><h3 id="Votes"><a href="#Votes" class="headerlink" title="Votes"></a><a href="#Votes" title="Votes"></a>Votes</h3><p>This will involve reusing the code behind <a href="http://hackage.haskell.org/packages/votes" target="_blank" rel="noopener">http://hackage.haskell.org/packages/votes</a><br>to accomodate an out of 5 stars rating system. The average rating of a package will be appended to the search/ browse page. The user can click and vote on packages either in the search page itself or in the individual package pages.</p><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a><a href="#Tags" title="Tags"></a>Tags</h3><p>At present, the <code>.cabal</code> file of a package has a category field. The same field can be extended to hold multiple values that can be parsed<br>into tags.<br>This would ensure that existing packages arent affected in any way. A far as social tagging is concerned, a simple “opt in to tagging?”<br>message can be appended to the upload page.</p><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a><a href="#Search" title="Search"></a>Search</h3><p>Relevant issues to fix:</p><ul><li>Substring search (<a href="https://github.com/haskell/hackage-server/issues/208" target="_blank" rel="noopener">#208</a>)</li><li>Searching and Coalescing Tags (<a href="https://github.com/haskell/hackage-server/issues/27" target="_blank" rel="noopener">#27</a>), (<a href="https://github.com/haskell/hackage-server/issues/24" target="_blank" rel="noopener">#24</a>)</li></ul><p>Additions:<br>This will involve redesigning the present search page and devising a method to integrate substring search into the present keyword-based<br>search in order to implement autocompletion and partial name search. One approach would be to build a prefix tree with the words in the<br>corpus as keys and their frequencies as values.</p><h2 id="Do-you-have-a-mentor-in-mind"><a href="#Do-you-have-a-mentor-in-mind" class="headerlink" title="Do you have a mentor in mind?"></a><a href="#Do-you-have-a-mentor-in-mind" title="Do you have a mentor in mind?"></a>Do you have a mentor in mind?</h2><p>I talked to dcoutts, hvr and sclv at #hackage and they said that they’d be ready to mentor/ assign a mentor for the summer.</p><h2 id="What-deliverables-do-you-think-are-reasonable-targets"><a href="#What-deliverables-do-you-think-are-reasonable-targets" class="headerlink" title="What deliverables do you think are reasonable targets?"></a><a href="#What-deliverables-do-you-think-are-reasonable-targets" title="What deliverables do you think are reasonable targets?"></a>What deliverables do you think are reasonable targets?</h2><ul><li>An issue tracker</li><li>A method to handle reverse dependencies</li><li>Improvements to tagging</li><li>An improved search experience</li></ul><h2 id="Can-you-outline-an-approximate-schedule-of-milestones"><a href="#Can-you-outline-an-approximate-schedule-of-milestones" class="headerlink" title="Can you outline an approximate schedule of milestones?"></a><a href="#Can-you-outline-an-approximate-schedule-of-milestones" title="Can you outline an approximate schedule of milestones?"></a>Can you outline an approximate schedule of milestones?</h2><h3 id="Before-June-12th"><a href="#Before-June-12th" class="headerlink" title="Before June 12th"></a><a href="#Before-June-12th" title="Before June 12th"></a>Before June 12th</h3><p>I’ll use this period to get acquainted my the mentor and become familiar with the hackage codebase.<br>I’ll also plan out what to do in the later phases, possibly with mockups and blog posts and solicit feedback for these plans. At the end of this period, I should have a roadmap of what to do and how to do it.</p><h3 id="June-13th-July-13th"><a href="#June-13th-July-13th" class="headerlink" title="June 13th - July 13th"></a><a href="#June-13th-July-13th" title="June 13th - July 13th"></a>June 13th - July 13th</h3><p>I’ll finish up with the tagging and the issue tracker along with their integration into the package pages.</p><h3 id="July-13th-August-5th"><a href="#July-13th-August-5th" class="headerlink" title="July 13th - August 5th"></a><a href="#July-13th-August-5th" title="July 13th - August 5th"></a>July 13th - August 5th</h3><p>This period would be spent working on and the search algorithm and interface</p><h3 id="August-5th-August-25th"><a href="#August-5th-August-25th" class="headerlink" title="August 5th - August 25th"></a><a href="#August-5th-August-25th" title="August 5th - August 25th"></a>August 5th - August 25th</h3><p>I’ll be working through an efficient way to keep track of reverse dependencies.</p><h3 id="After-August-25th"><a href="#After-August-25th" class="headerlink" title="After August 25th"></a><a href="#After-August-25th" title="After August 25th"></a>After August 25th</h3><p>Any remaining time will be spent fine tuning the work done in the first two months, writing documentation and cleaning up the codebase</p><h2 id="In-what-ways-will-this-project-benefit-the-wider-Haskell-community"><a href="#In-what-ways-will-this-project-benefit-the-wider-Haskell-community" class="headerlink" title="In what ways will this project benefit the wider Haskell community?"></a><a href="#In-what-ways-will-this-project-benefit-the-wider-Haskell-community" title="In what ways will this project benefit the wider Haskell community?"></a>In what ways will this project benefit the wider Haskell community?</h2><p>Along with GHC and Cabal, Hackage forms the core of the Haskell ecosystem. Improvements here should help the community as a whole.</p><h2 id="What-relevant-experience-do-you-have"><a href="#What-relevant-experience-do-you-have" class="headerlink" title="What relevant experience do you have?"></a><a href="#What-relevant-experience-do-you-have" title="What relevant experience do you have?"></a>What relevant experience do you have?</h2><p>I’ve just finised the sophomore year of my bachelors in computer science.</p><p>I’ve been using and have been a supporter of free software since high school and have been programming for about 4 years. I’ve worked mainly<br>in python, javascript and C++ and have built and maintained multiple websites.<br>I was introduced to functional programming when I learnt scheme a little over a year ago. I fell in love with the elegance of haskell over the last half year en route to becoming convinced that it a much better paradigm for writing programs in.<br>I’ve used haskell in university for my OS course that involved multithreading. I’ve implemented a subset of scheme in Haskell and also<br>dabbled around in building parsers for toy languages.</p><h2 id="In-what-ways-do-you-envisage-interacting-with-the-wider-Haskell-community-during-your-project"><a href="#In-what-ways-do-you-envisage-interacting-with-the-wider-Haskell-community-during-your-project" class="headerlink" title="In what ways do you envisage interacting with the wider Haskell community during your project?"></a><a href="#In-what-ways-do-you-envisage-interacting-with-the-wider-Haskell-community-during-your-project" title="In what ways do you envisage interacting with the wider Haskell community during your project?"></a>In what ways do you envisage interacting with the wider Haskell community during your project?</h2><p>The haskell community is in general very helpful and I regularly hang around in #haskell and <a href="http://www.reddit.com/r/haskell" target="_blank" rel="noopener">/r/haskell</a><br>and am part of the Haskell learning Group on slack. Whenever stackoverflow has failed me in the past, I’ve turned to them and am<br>confident I’d be able to find help there if my mentor is otherwise occupied.</p><p>I have a <a href="http://sooryanarayan.me/" target="_blank" rel="noopener">blog</a> set up (with nothing on it yet) and if accepted, I’ll keep track of the developments there and post<br>updates to reddit and planet haskell.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Haskell, Open Source, HSoC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>art</title>
      <link href="/art/index.html"/>
      <url>/art/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Art washes away from the soul the dust of everyday life.<br>~ Pablo Picasso  </p></blockquote><p>Here are some of my oil, acrylic and watercolor paintings from 2010-2014. Hoping to wash away some more dust soon</p><style>.demo-gallery > ul {  list-style-type: none;  padding: 0px;  margin: 0px;  text-align: center;}.demo-gallery > ul > li {  margin: 15px;  width: 180px;  display: inline-block;  margin-right: 15px;  list-style: outside none none;  /* line-height: 45px; */  vertical-align: middle;}.demo-gallery > ul > li a {  border: 3px solid #FFF;  border-radius: 3px;  display: inline-block;  overflow: hidden;  position: relative;  float: left;}.demo-gallery > ul > li a > img {  -webkit-transition: -webkit-transform 0.15s ease 0s;  -moz-transition: -moz-transform 0.15s ease 0s;  -o-transition: -o-transform 0.15s ease 0s;  transition: transform 0.15s ease 0s;  -webkit-transform: scale3d(1, 1, 1);  transform: scale3d(1, 1, 1);  /* height: 100%; */  width: 100%;}.demo-gallery > ul > li a:hover > img {  -webkit-transform: scale3d(1.1, 1.1, 1.1);  transform: scale3d(1.1, 1.1, 1.1);}.demo-gallery > ul > li a:hover .demo-gallery-poster > img {  opacity: 1;}.demo-gallery > ul > li a .demo-gallery-poster {  background-color: rgba(0, 0, 0, 0.1);  bottom: 0;  left: 0;  position: absolute;  right: 0;  top: 0;  -webkit-transition: background-color 0.15s ease 0s;  -o-transition: background-color 0.15s ease 0s;  transition: background-color 0.15s ease 0s;}.demo-gallery > ul > li a .demo-gallery-poster > img {  left: 50%;  margin-left: -10px;  margin-top: -10px;  opacity: 0;  position: absolute;  top: 50%;  -webkit-transition: opacity 0.3s ease 0s;  -o-transition: opacity 0.3s ease 0s;  transition: opacity 0.3s ease 0s;}.demo-gallery > ul > li a:hover .demo-gallery-poster {  background-color: rgba(0, 0, 0, 0.5);}.demo-gallery .justified-gallery > a > img {  -webkit-transition: -webkit-transform 0.15s ease 0s;  -moz-transition: -moz-transform 0.15s ease 0s;  -o-transition: -o-transform 0.15s ease 0s;  transition: transform 0.15s ease 0s;  -webkit-transform: scale3d(1, 1, 1);  transform: scale3d(1, 1, 1);  height: 100%;  width: 100%;}.demo-gallery .justified-gallery > a:hover > img {  -webkit-transform: scale3d(1.1, 1.1, 1.1);  transform: scale3d(1.1, 1.1, 1.1);}.demo-gallery .justified-gallery > a:hover .demo-gallery-poster > img {  opacity: 1;}.demo-gallery .justified-gallery > a .demo-gallery-poster {  background-color: rgba(0, 0, 0, 0.1);  bottom: 0;  left: 0;  position: absolute;  right: 0;  top: 0;  -webkit-transition: background-color 0.15s ease 0s;  -o-transition: background-color 0.15s ease 0s;  transition: background-color 0.15s ease 0s;}.demo-gallery .justified-gallery > a .demo-gallery-poster > img {  left: 50%;  margin-left: -10px;  margin-top: -10px;  opacity: 0;  position: absolute;  top: 50%;  -webkit-transition: opacity 0.3s ease 0s;  -o-transition: opacity 0.3s ease 0s;  transition: opacity 0.3s ease 0s;}.demo-gallery .justified-gallery > a:hover .demo-gallery-poster {  background-color: rgba(0, 0, 0, 0.5);}.demo-gallery .video .demo-gallery-poster img {  height: 48px;  margin-left: -24px;  margin-top: -24px;  opacity: 0.8;  width: 48px;}.demo-gallery.dark > ul > li a {  border: 3px solid #04070a;}</style><div class="demo-gallery"><ul id="lightGallery">    <li data-src="/assets/art/bear.jpg">         <a href="/assets/art/bear.jpg">            <img src="/assets/art/thumbs/thumb.bear.jpg">        </a>    </li>    <li data-src="/assets/art/04.jpg">         <a href="/assets/art/04.jpg">            <img src="/assets/art/thumbs/thumb.04.jpg">        </a>    </li>    <li data-src="/assets/art/01.jpg">         <a href="/assets/art/01.jpg">            <img src="/assets/art/thumbs/thumb.01.jpg">        </a>    </li>    <li data-src="/assets/art/02.jpg">         <a href="/assets/art/02.jpg">            <img src="/assets/art/thumbs/thumb.02.jpg">        </a>    </li>    <li data-src="/assets/art/05.jpg">         <a href="/assets/art/05.jpg">            <img src="/assets/art/thumbs/thumb.05.jpg">        </a>    </li>    <li data-src="/assets/art/09.jpg">         <a href="/assets/art/09.jpg">            <img src="/assets/art/thumbs/thumb.09.jpg">        </a>    </li>    <li data-src="/assets/art/Harbour.jpg">         <a href="/assets/art/Harbour.jpg">            <img src="/assets/art/thumbs/thumb.Harbour.jpg">        </a>    </li>    <li data-src="/assets/art/08.jpg">         <a href="/assets/art/08.jpg">            <img src="/assets/art/thumbs/thumb.08.jpg">        </a>    </li>    <li data-src="/assets/art/14.jpg">         <a href="/assets/art/14.jpg">            <img src="/assets/art/thumbs/thumb.14.jpg">        </a>    </li>    <li data-src="/assets/art/06.jpg">         <a href="/assets/art/06.jpg">            <img src="/assets/art/thumbs/thumb.06.jpg">        </a>    </li>    <li data-src="/assets/art/03.jpg">         <a href="/assets/art/03.jpg">            <img src="/assets/art/thumbs/thumb.03.jpg">        </a>    </li>    <li data-src="/assets/art/07.jpg">         <a href="/assets/art/07.jpg">            <img src="/assets/art/thumbs/thumb.07.jpg">        </a>    </li>    <li data-src="/assets/art/10.jpg">         <a href="/assets/art/10.jpg">            <img src="/assets/art/thumbs/thumb.10.jpg">        </a>    </li>    <li data-src="/assets/art/13.jpg">         <a href="/assets/art/13.jpg">            <img src="/assets/art/thumbs/thumb.13.jpg">        </a>    </li>    <li data-src="/assets/art/12.jpg">         <a href="/assets/art/12.jpg">            <img src="/assets/art/thumbs/thumb.12.jpg">        </a>    </li>    <li data-src="/assets/art/11.jpg">         <a href="/assets/art/11.jpg">            <img src="/assets/art/thumbs/thumb.11.jpg">        </a>    </li>    <li data-src="/assets/art/15.jpg">         <a href="/assets/art/15.jpg">            <img src="/assets/art/thumbs/thumb.15.jpg">        </a>    </li>    <li data-src="/assets/art/16.jpg">         <a href="/assets/art/16.jpg">            <img src="/assets/art/thumbs/thumb.16.jpg">        </a>    </li>    <li data-src="/assets/art/17.jpg">         <a href="/assets/art/17.jpg">            <img src="/assets/art/thumbs/thumb.17.jpg">        </a>    </li>    <li data-src="/assets/art/19.jpg">         <a href="/assets/art/19.jpg">            <img src="/assets/art/thumbs/thumb.19.jpg">        </a>    </li>    <li data-src="/assets/art/18.jpg">         <a href="/assets/art/18.jpg">            <img src="/assets/art/thumbs/thumb.18.jpg">        </a>    </li>    </ul></div><script>    lightGallery(document.getElementById('lightGallery'));</script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>search</title>
      <link href="/search/index.html"/>
      <url>/search/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
